#include <ncurses.h>
#include <vector>
#include <semaphore.h>
#include <pthread.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>

using namespace std;

#define PLAYER '1'
#define EMPTY  ' '
#define HEIGHT 24
#define WIDTH  50

int is_move_okay(int y, int x);

struct player_map {
    char pl_map[5][5];
    sem_t sem_1;
    sem_t sem_2;
    int input;
};

vector<vector<char>> vect
        {
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '~', '~', '~', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '~', '~', '~', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '~', '~', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '~', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', ' ', '~', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', ' ', '#', ' ', '~', '~', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#'},
                {'#', ' ', '#', ' ', '#', '~', '~', ' ', '#', ' ', ' ', ' ', ' ', '~', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', '~', '~', '~', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '~', ' ', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '~', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '~', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', '#', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '~', '~', '#', '#', '#', ' ', '#'},
                {'#', ' ', '#', '~', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '~', '~', ' ', ' ', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '~', '#', '#', '#', '#', '#', ' ', '#'},
                {'#', '~', '~', '~', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '~', '~', '~', '#', '~', '~', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', '~', '~', '~', '~', '~', '~', ' ', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '~', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '~', ' ', ' ', ' ', ' ', '~', ' ', '#'},
                {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', '~', '~', '~', '~', '#', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '~', '~', ' ', ' ', ' ', '#'},
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };

void fill_user_map(struct player_map *p, int x, int y);

int main() {
    sem_t *sem_memory = sem_open("sem_mem", O_CREAT, 0777, 0);
    if (sem_memory == NULL) {
        cout << "sem_open failed";
        return -1;
    }

    int fd = shm_open("my_shm", O_CREAT | O_EXCL | O_RDWR, 0777);
    if (fd == -1) {
        cout << "shm_open failed";
        return -1;
    }

    if (ftruncate(fd, sizeof(struct player_map)) == -1) {
        cout << "ftruncate failed";
        return -1;
    }

    struct player_map *p_map = static_cast<player_map *>(mmap(NULL, sizeof(struct player_map), PROT_READ | PROT_WRITE,
                                                              MAP_SHARED, fd, 0));

    if (p_map == NULL) {
        cout << "mmap failed";
        return -1;
    }

    sem_init(&p_map->sem_1, 1, 0);
    sem_init(&p_map->sem_2, 1, 0);

    sem_post(sem_memory);

    initscr();
    keypad(stdscr, true);
    noecho();

    for (int i = 0; i < vect.size(); i++)
    {
        for (int j = 0; j < vect[i].size(); j++)
        {
            printw("%c", vect[i][j]);
        }
        move(i+1, 0);
    }

    int x = 9;
    int y = 10;
    int ch;

    do {
        mvaddch(y, x, PLAYER);
        move(y,x);
        refresh();

        fill_user_map(p_map, x, y);
        sem_post(&p_map->sem_1);

        sem_wait(&p_map->sem_2);
        switch (p_map->input) {
            case KEY_UP:
                if ((y > 0) && is_move_okay(y - 1, x)) {
                    mvaddch(y, x, vect[y][x]); // bylo EMPTY
                    y = y - 1;
                }
                break;
            case KEY_DOWN:
                if ((y < LINES - 1) && is_move_okay(y + 1, x)) {
                    mvaddch(y, x, vect[y][x]);
                    y = y + 1;
                }
                break;
            case KEY_LEFT:
                if ((x > 0) && is_move_okay(y, x - 1)) {
                    mvaddch(y, x, vect[y][x]);
                    x = x - 1;
                }
                break;
            case KEY_RIGHT:
                if ((x < COLS - 1) && is_move_okay(y, x + 1)) {
                    mvaddch(y, x, vect[y][x]);
                    x = x + 1;
                }
                break;
        }
    } while (p_map->input != 'q');

    endwin();

    shm_unlink("my_shm");
    sem_close(sem_memory);
    sem_destroy(&p_map->sem_1);
    sem_destroy(&p_map->sem_2);
    munmap(p_map, sizeof(struct player_map));
    return 0;
}

int is_move_okay (int y, int x) {
    int testch;
    testch = mvinch(y, x);
    return ((testch & A_CHARTEXT) == EMPTY || (testch & A_CHARTEXT) == '~');
}

void fill_user_map(struct player_map *p, int x, int y) {
    p->pl_map[0][0] = (y-2 < 0 || x - 2 < 0) ? ' ' : vect[y-2][x-2];
    p->pl_map[0][1] = (y-2 < 0 || x - 1 < 0) ? ' ' : vect[y-2][x-1];
    p->pl_map[0][2] = (y-2 < 0) ? ' ' : vect[y-2][x];
    p->pl_map[0][3] = (y-2 < 0 || x + 1 > WIDTH) ? ' ' : vect[y-2][x+1];
    p->pl_map[0][4] = (y-2 < 0 || x + 2 > WIDTH) ? ' ' : vect[y-2][x+2];

    p->pl_map[1][0] = (y-1 < 0 || x - 2 < 0) ? ' ' : vect[y-1][x-2];
    p->pl_map[1][1] = (y-1 < 0 || x - 1 < 0) ? ' ' : vect[y-1][x-1];
    p->pl_map[1][2] = (y-1 < 0) ? ' ' : vect[y-1][x];
    p->pl_map[1][3] = (y-1 < 0 || x + 1 > WIDTH) ? ' ' : vect[y-1][x+1];
    p->pl_map[1][4] = (y-1 < 0 || x + 2 > WIDTH) ? ' ' : vect[y-1][x+2];

    p->pl_map[2][0] = (x - 2 < 0) ? ' ' : vect[y][x-2];
    p->pl_map[2][1] = (x - 1 < 0) ? ' ' : vect[y][x-1];
    p->pl_map[2][2] = '1';
    p->pl_map[2][3] = (x + 1 > WIDTH) ? ' ' : vect[y][x+1];
    p->pl_map[2][4] = (x + 2 > WIDTH) ? ' ' : vect[y][x+2];

    p->pl_map[3][0] = (y+1 > HEIGHT || x - 2 < 0) ? ' ' : vect[y+1][x-2];
    p->pl_map[3][1] = (y+1 > HEIGHT || x - 1 < 0) ? ' ' : vect[y+1][x-1];
    p->pl_map[3][2] = (y+1 > HEIGHT) ? ' ' : vect[y+1][x];
    p->pl_map[3][3] = (y+1 > HEIGHT || x + 1 > WIDTH) ? ' ' : vect[y+1][x+1];
    p->pl_map[3][4] = (y+1 > HEIGHT || x + 2 > WIDTH) ? ' ' : vect[y+1][x+2];

    p->pl_map[4][0] = (y+2 > HEIGHT || x - 2 < 0) ? ' ' : vect[y+2][x-2];
    p->pl_map[4][1] = (y+2 > HEIGHT || x - 1 < 0) ? ' ' : vect[y+2][x-1];
    p->pl_map[4][2] = (y+2 > HEIGHT) ? ' ' : vect[y+2][x];
    p->pl_map[4][3] = (y+2 > HEIGHT || x + 1 > WIDTH) ? ' ' : vect[y+2][x+1];
    p->pl_map[4][4] = (y+2 > HEIGHT || x + 2 > WIDTH) ? ' ' : vect[y+2][x+2];
}

